package main

import (
	"strings"

	"github.com/ddkwork/golibrary/std/stream"
)

// Code generated by EnumTypesGen - DO NOT EDIT.

type WorkType uint8

const (
	BuyTomatoesType WorkType = iota
	DecodeRawType
	ManPieceworkType
	EnvironmentType
	ExplorerType
	GodocType
	JsontreeType
	KeygenType
	Struct2tableType
	TaskmanagerType
	VstartType
)

func (t WorkType) Valid() bool {
	return t >= BuyTomatoesType && t <= VstartType
}

func WorkTypeBy[T stream.Integer](v T) WorkType {
	return WorkType(v)
}

func (t WorkType) AssertBy(name string) WorkType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.EqualFold(name, n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t WorkType) String() string {
	switch t {
	case BuyTomatoesType:
		return "BuyTomatoes"
	case DecodeRawType:
		return "DecodeRaw"
	case ManPieceworkType:
		return "ManPiecework"
	case EnvironmentType:
		return "Environment"
	case ExplorerType:
		return "Explorer"
	case GodocType:
		return "Godoc"
	case JsontreeType:
		return "Jsontree"
	case KeygenType:
		return "Keygen"
	case Struct2tableType:
		return "Struct2table"
	case TaskmanagerType:
		return "Taskmanager"
	case VstartType:
		return "Vstart"
	default:
		panic("InvalidType")
	}
}

func (t WorkType) Tooltip() string {
	switch t {
	case BuyTomatoesType:
		return "BuyTomatoes"
	case DecodeRawType:
		return "DecodeRaw"
	case ManPieceworkType:
		return "ManPiecework"
	case EnvironmentType:
		return "environment"
	case ExplorerType:
		return "explorer"
	case GodocType:
		return "godoc"
	case JsontreeType:
		return "jsontree"
	case KeygenType:
		return "keygen"
	case Struct2tableType:
		return "struct2table"
	case TaskmanagerType:
		return "taskmanager"
	case VstartType:
		return "vstart"
	default:
		panic("InvalidType")
	}
}

func (t WorkType) Names() []string {
	return []string{
		"BuyTomatoes",
		"DecodeRaw",
		"ManPiecework",
		"Environment",
		"Explorer",
		"Godoc",
		"Jsontree",
		"Keygen",
		"Struct2table",
		"Taskmanager",
		"Vstart",
	}
}

func (t WorkType) EnumTypes() []WorkType {
	return []WorkType{
		BuyTomatoesType,
		DecodeRawType,
		ManPieceworkType,
		EnvironmentType,
		ExplorerType,
		GodocType,
		JsontreeType,
		KeygenType,
		Struct2tableType,
		TaskmanagerType,
		VstartType,
	}
}

func (t WorkType) SvgFileName() string {
	return t.String() + ".svg"
}
