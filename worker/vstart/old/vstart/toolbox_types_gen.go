package main

import (
	"strings"

	"github.com/ddkwork/golibrary/std/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type ToolboxType uint8

const (
	AppType ToolboxType = iota
	GitType
	EnvType
	AiType
	NotesType
	Json2goType
	TranslateType
	WebBookMarkType
	GolangType
)

func (t ToolboxType) Valid() bool {
	return t >= AppType && t <= GolangType
}

func ToolboxTypeBy[T stream.Integer](v T) ToolboxType {
	return ToolboxType(v)
}

func (t ToolboxType) AssertBy(name string) ToolboxType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t ToolboxType) String() string {
	switch t {
	case AppType:
		return "App"
	case GitType:
		return "Git"
	case EnvType:
		return "Env"
	case AiType:
		return "Ai"
	case NotesType:
		return "Notes"
	case Json2goType:
		return "Json2go"
	case TranslateType:
		return "Translate"
	case WebBookMarkType:
		return "WebBookMark"
	case GolangType:
		return "Golang"
	default:
		panic("InvalidType")
	}
}

func (t ToolboxType) Tooltip() string {
	switch t {
	case AppType:
		return "应用集"
	case GitType:
		return "git相关"
	case EnvType:
		return "环境变量"
	case AiType:
		return "人工智能"
	case NotesType:
		return "笔记"
	case Json2goType:
		return "json转go结构体"
	case TranslateType:
		return "注释翻译"
	case WebBookMarkType:
		return "网页收藏夹"
	case GolangType:
		return "go语言设置"
	default:
		panic("InvalidType")
	}
}

func (t ToolboxType) Names() []string {
	return []string{
		"App",
		"Git",
		"Env",
		"Ai",
		"Notes",
		"Json2go",
		"Translate",
		"WebBookMark",
		"Golang",
	}
}

func (t ToolboxType) EnumTypes() []ToolboxType {
	return []ToolboxType{
		AppType,
		GitType,
		EnvType,
		AiType,
		NotesType,
		Json2goType,
		TranslateType,
		WebBookMarkType,
		GolangType,
	}
}

func (t ToolboxType) SvgFileName() string {
	return t.String() + ".svg"
}
